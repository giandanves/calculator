(()=>{var t={104:t=>{var e="undefined"!=typeof process&&process.pid?process.pid.toString(36):"";function s(){var t=Date.now(),e=s.last||t;return s.last=t>e?t:e+1}t.exports=t.exports.default=function(t,i){return(t||"")+""+e+s().toString(36)+(i||"")},t.exports.process=function(t,i){return(t||"")+e+s().toString(36)+(i||"")},t.exports.time=function(t,e){return(t||"")+s().toString(36)+(e||"")}}},e={};function s(i){var r=e[i];if(void 0!==r)return r.exports;var n=e[i]={exports:{}};return t[i](n,n.exports,s),n.exports}s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=s(104),e=s.n(t);const i={delete:"del",clear:"clear",add:"+",subtract:"-",divide:"/",multiply:"*",equals:"=",percent:"%",signalchanger:"+/-",comma:",",zero:"0",one:"1",two:"2",three:"3",four:"4",five:"5",six:"6",seven:"7",eight:"8",nine:"9"},r={"+":(t,e)=>1*t+1*e,"-":(t,e)=>1*t-1*e,"*":(t,e)=>t*e,"/":(t,e)=>t/e};class n extends EventTarget{constructor(){super(),this.state="0",this.lastStateLog=0,this.stateLog="",this.store="",this.opChecker=0}get _state(){return this.state}get _stateLog(){return this.stateLog}storeOperation(t,e,s,i){this.store?this.store+="="==s?`${t.substr(-1)}${e}${s}${i}`:`${s}${e}`:"="==s?this.store=`${t}${e}${s}${i}`:this.store+=`${t}${e}`,"="==s&&(this.dispatchEvent(new CustomEvent("operationFinished",{detail:this.store})),this.store="")}updateStateLog(t,e){this.stateLog=t+e}calcPercent(){var t;this.stateLog?this.state=(t=this.stateLog,this.state*t.split(/\D+/g)[0]/100):this.state=0}getSecondCalcArgument(t){this.state=t,this.opChecker=0}changeOperation(t){this.opChecker=1,this.stateLog=this.stateLog.replace(`${this.stateLog.substr(length-1,1)}`,`${t}`)}makeOperation(t){if(this.stateLog){let e=function(t){const e=t.split(/\+|-|\/|\*/);let s=t.split(/\d+/).filter((t=>{if("+"==t||"/"==t||"-"==t||"*"==t)return t})),i=e[0];return"-"==t[0]&&(i=s[0]+e[0],s.splice(0,1)),s.forEach(((t,s)=>{s<e.length&&(i=r[t](i,e[s+1]))})),i}(this._stateLog+this.state);this.storeOperation(this.stateLog,this.state,t,e),this.state=e}}handleOperation(t){this.opChecker++,isNaN(this.lastStateLog)?this.changeOperation(t):this.makeOperation(t),this.updateStateLog(this.state,t)}updateState(t){if(this.locallyStoredOperation="","del"==t)return this.state=this.state.slice(0,-1),this._state;if("+/-"==t)return this.state=-1*this.state,this._state;if("."==t)return this.state+=t,this.state;if("clear"==t)return this.state=0,this.stateLog="",this._state;if("="==t){if(this.lastStateLog==t)return this._state;if(this.stateLog){let e=`${this.stateLog} ${this.state}`;this.makeOperation(t),this.updateStateLog(e,t),this.lastStateLog=t}return this._state}return"%"==t?(this.calcPercent(),this._state):("0"!=this.state&&1!=this.opChecker||0!=isNaN(t)?isNaN(t)?this.handleOperation(t):this.state+=t:this.getSecondCalcArgument(t),this.lastStateLog=t,this._state)}}const o=n;let a,h=new o,l=new class{get history(){return new Promise((t=>{var e;t(JSON.parse(null!==(e=window.localStorage.getItem("history"))&&void 0!==e?e:"[]"))}))}set history(t){window.localStorage.setItem("history",JSON.stringify(t))}save(t){return this.history.then((e=>{if(e.find((e=>t.id===e.id)))throw new Error("This ID already exists on memory");return e.push(t),this.history=e,t}))}find({id:t,date:e,content:s}){return null==t&&null==e&&null==s?null:this.history.then((i=>i.find((i=>!(i.id!=t&&null!=t||i.date!=e&&null!=e||i.content!=s&&null!=s)))))}first(){return this.history.then((t=>t[t.length-1]))}findAll({id:t,date:e,content:s}){return this.history.then((i=>i.filter((i=>!(i.id!=t&&null!=t||i.date!=e&&null!=e||i.content!=s&&null!=s)))))}delete(t){return this.history.then((e=>{const s=e.filter((e=>e.id!==t)),i=e.find((e=>e.id===t));if(!i)throw new Error("id is not registered");return this.history=s,i}))}deleteMany(t){return this.history.then((e=>{const s=e.filter((e=>!t.includes(e.id))),i=e.filter((e=>t.includes(e.id)));if(i.length!==t.length)throw new Error("Some id is not registered");return this.history=s,i}))}addMany(t){const e=[];for(let e of t)if(t.filter((t=>t.id===e.id)).length>1)throw new Error("Repeated IDs provided");return this.history.then((s=>{if(t.find((t=>{if(s.find((e=>e.id==t.id)))throw new Error("Repeated IDs");e.push(t)})),e.length!=t.length)throw new Error("Cannot add all the provided items");return e.forEach((t=>s.push(t))),this.history=s,e}))}};h.addEventListener("operationFinished",(t=>{l.save({id:e()(),operation:t.detail,date:new Date})})),a=new class{constructor(t){var e,s;for(var r in s=t=>{let e=i[t.currentTarget.id];","==e&&(e="."),this.onClick(e)},(e="onButtonClick")in this?Object.defineProperty(this,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[e]=s,this.buttons=[],i){const t=document.querySelector(`#${r}`);t.addEventListener("click",this.onButtonClick),this.buttons.push(t)}this.onClick=t}renderCalculum(t,e){const s=t.toString().replace(".",","),i=e.toString().replace(".",",");this.calculumLog=document.querySelector("#calculum-log"),this.calculumLog.textContent=i,this.calculumRendered=document.querySelector("#calculum-rendered"),this.calculumRendered.textContent=s}}((function(t){a.renderCalculum(h.updateState(t),h._stateLog)})),a.renderCalculum(h._state,h._stateLog)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,