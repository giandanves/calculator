(()=>{"use strict";const t=document.querySelector("#empty-history"),e=document.querySelector("#filled-history");(new class{get history(){return new Promise((t=>{var e;t(JSON.parse(null!==(e=window.localStorage.getItem("history"))&&void 0!==e?e:"[]"))}))}set history(t){window.localStorage.setItem("history",JSON.stringify(t))}save(t){return this.history.then((e=>{if(e.find((e=>t.id===e.id)))throw new Error("This ID already exists on memory");return e.push(t),this.history=e,t}))}find({id:t,date:e,content:n}){return null==t&&null==e&&null==n?null:this.history.then((r=>r.find((r=>!(r.id!=t&&null!=t||r.date!=e&&null!=e||r.content!=n&&null!=n)))))}first(){return this.history.then((t=>t[t.length-1]))}findAll({id:t,date:e,content:n}){return this.history.then((r=>r.filter((r=>!(r.id!=t&&null!=t||r.date!=e&&null!=e||r.content!=n&&null!=n)))))}delete(t){return this.history.then((e=>{const n=e.filter((e=>e.id!==t)),r=e.find((e=>e.id===t));if(!r)throw new Error("id is not registered");return this.history=n,r}))}deleteMany(t){return this.history.then((e=>{const n=e.filter((e=>!t.includes(e.id))),r=e.filter((e=>t.includes(e.id)));if(r.length!==t.length)throw new Error("Some id is not registered");return this.history=n,r}))}addMany(t){const e=[];for(let e of t)if(t.filter((t=>t.id===e.id)).length>1)throw new Error("Repeated IDs provided");return this.history.then((n=>{if(t.find((t=>{if(n.find((e=>e.id==t.id)))throw new Error("Repeated IDs");e.push(t)})),e.length!=t.length)throw new Error("Cannot add all the provided items");return e.forEach((t=>n.push(t))),this.history=n,e}))}}).history.then((n=>{n.length?(n.forEach((t=>{const n=document.createElement("div");n.className="history-container__calculum";const r=document.createElement("h3");r.className="calculum__operation";const i=document.createElement("h2");i.className="calculum__result",function(t,e,n){let r=!1;n.split("").forEach((n=>{"="==n&&(r=!0),r&&"="!=n?e.textContent+=n:t.textContent+=n}))}(r,i,t.operation),n.appendChild(r),n.appendChild(i),e.appendChild(n)})),e.style.display="flex",t.style.display="none"):(e.style.display="none",t.style.display="flex")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,